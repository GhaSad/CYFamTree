package dao;

import model.*;

import java.sql.*;
import java.util.*;

/**
 * DAO responsable des op√©rations sur les n≈ìuds de l‚Äôarbre g√©n√©alogique dans la base de donn√©es.
 * Il permet de sauvegarder des n≈ìuds, mettre √† jour leur lien avec un arbre et charger l‚Äôarbre complet.
 */
public class NoeudDAO {
    private Connection connection;

    /**
     * Constructeur prenant une connexion √† la base de donn√©es.
     * @param connection Connexion active √† la base.
     */
    public NoeudDAO(Connection connection) {
        this.connection = connection;
    }

    /**
     * Ins√®re un n≈ìud dans la base de donn√©es et r√©cup√®re son ID g√©n√©r√© automatiquement.
     *
     * @param noeud Le n≈ìud √† sauvegarder.
     * @param idArbre L‚ÄôID de l‚Äôarbre auquel appartient ce n≈ìud.
     * @throws SQLException Si une erreur SQL survient.
     */
    public void sauvegarderNoeud(Noeud noeud, int idArbre) throws SQLException {
        String sql = "INSERT INTO noeud (id_personne, visibilite, arbre_id) VALUES (?, ?, ?)";
        Personne p = noeud.getPersonne();

        try (PreparedStatement stmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, p.getId());
            stmt.setString(2, noeud.getVisibilite().toString());
            stmt.setInt(3, idArbre);
            stmt.executeUpdate();

            try (ResultSet rs = stmt.getGeneratedKeys()) {
                if (rs.next()) {
                    noeud.setId(rs.getInt(1));
                } else {
                    throw new SQLException("√âchec de r√©cup√©ration de l'ID du n≈ìud.");
                }
            }
        }
    }

    /**
     * Met √† jour l‚ÄôID de l‚Äôarbre pour un n≈ìud existant en base.
     *
     * @param noeud Le n≈ìud √† mettre √† jour.
     * @param idArbre Le nouvel ID de l‚Äôarbre.
     * @throws SQLException Si une erreur SQL survient.
     */
    public void ajouterArbreIdAuNoeud(Noeud noeud, int idArbre) throws SQLException {
        String sql = "UPDATE noeud SET arbre_id = ? WHERE id_personne = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, idArbre);
            stmt.setInt(2, noeud.getPersonne().getId());
            stmt.executeUpdate();
        }
    }

    /**
     * Charge compl√®tement un arbre g√©n√©alogique (avec ses n≈ìuds et ses relations) √† partir de son ID.
     *
     * @param utilisateur L‚Äôutilisateur propri√©taire de l‚Äôarbre.
     * @param idArbre L‚Äôidentifiant de l‚Äôarbre √† charger.
     * @return L‚Äôarbre g√©n√©alogique reconstruit.
     * @throws SQLException En cas d‚Äôerreur de r√©cup√©ration depuis la base.
     */
    public ArbreGenealogique chargerArbreComplet(Utilisateur utilisateur, int idArbre) throws SQLException {
        ArbreGenealogique arbre = null;
        Map<Integer, Noeud> noeudsMap = new HashMap<>();

        // üîπ R√©cup√©rer la personne racine de l‚Äôarbre
        String sqlRacine = "SELECT racine_id FROM arbre WHERE id = ?";
        try (PreparedStatement stmtR = connection.prepareStatement(sqlRacine)) {
            stmtR.setInt(1, idArbre);
            ResultSet rsR = stmtR.executeQuery();

            if (rsR.next()) {
                int racineIdNoeud = rsR.getInt("racine_id");

                String sqlRacinePersonne = "SELECT id_personne FROM noeud WHERE id_noeud = ?";
                try (PreparedStatement stmtP = connection.prepareStatement(sqlRacinePersonne)) {
                    stmtP.setInt(1, racineIdNoeud);
                    ResultSet rsP = stmtP.executeQuery();
                    if (rsP.next()) {
                        int idPersonneRacine = rsP.getInt("id_personne");
                        Personne racinePersonne = PersonneDAO.trouverPersonneParId(idPersonneRacine);

                        arbre = new ArbreGenealogique(utilisateur, racinePersonne);
                        arbre.setId(idArbre);
                    } else {
                        throw new SQLException("‚ùå Personne racine introuvable");
                    }
                }
            } else {
                throw new SQLException("‚ùå Arbre introuvable");
            }
        }

        if (arbre == null) {
            throw new SQLException("‚ùå Erreur : arbre non instanci√©");
        }

        // üîπ Charger tous les n≈ìuds de l‚Äôarbre
        String sqlNoeuds = "SELECT id_noeud, id_personne, visibilite FROM noeud WHERE arbre_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sqlNoeuds)) {
            stmt.setInt(1, idArbre);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                int idNoeud = rs.getInt("id_noeud");
                int idPersonne = rs.getInt("id_personne");
                String visStr = rs.getString("visibilite");

                Personne p = PersonneDAO.trouverPersonneParId(idPersonne);
                Visibilite vis = Visibilite.valueOf(visStr);

                Noeud noeud = new Noeud(idNoeud, p, vis);
                noeudsMap.put(idNoeud, noeud);
            }
        }

        // üîπ Reconstituer les liens parent-enfant
        String sqlRelations = "SELECT id_parent, id_enfant FROM noeud_lien WHERE arbre_id = ?";
        try (PreparedStatement stmtRel = connection.prepareStatement(sqlRelations)) {
            stmtRel.setInt(1, idArbre);
            ResultSet rsRel = stmtRel.executeQuery();

            while (rsRel.next()) {
                int idParent = rsRel.getInt("id_parent");
                int idEnfant = rsRel.getInt("id_enfant");

                Noeud parent = noeudsMap.get(idParent);
                Noeud enfant = noeudsMap.get(idEnfant);

                if (parent != null && enfant != null) {
                    parent.ajouterEnfant(enfant);
                }
            }
        }

        // üîπ Ajout des n≈ìuds √† l‚Äôarbre
        for (Noeud n : noeudsMap.values()) {
            arbre.ajouterNoeud(n);
        }

        return arbre;
    }
}
